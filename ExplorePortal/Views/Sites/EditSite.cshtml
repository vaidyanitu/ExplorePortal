@model ExploreModel.Site

@{
    ViewBag.Title = "Edit Site";
}
<link href="~/Scripts/summernote/summernote.css" rel="stylesheet" />
<script src="~/Scripts/summernote/summernote.js"></script>

@*<h2>Edit Site</h2>*@

@using (Html.BeginForm("EditSite", "Sites", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
       
               @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.SiteId)

        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.Photo, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @{ byte[] photo = Model.Photo;
                     string imageSrc = null;
                     if (photo != null)
                     {
                         var imageBase64 = Convert.ToBase64String(Model.Photo.ToArray());
                         imageSrc = string.Format("data:image/jpeg;base64,{0}", imageBase64);
                     }
                    }

                    <img src="@imageSrc" alt="Image" height="100" width="100" id="pic" />
                    <input type="file" id="file" name="file">                  
                    @if (ViewBag.userId != Model.AuthorId)
                    {
                        <script type="text/javascript">
            window.onload = function () {
                alert("You are not authorized to edit this site");
                window.location = '/Explore';
            };
                        </script>
                    }

                </div>
            </div>

          
        </div>

        <div class="col-md-8">
        <div class="form-group">
            @Html.LabelFor(model => model.SiteName, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SiteName)
                @Html.ValidationMessageFor(model => model.SiteName)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SiteLocation, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SiteLocation)
                @Html.ValidationMessageFor(model => model.SiteLocation)
            </div>
        </div>

            <div class="form-group">
                @Html.LabelFor(model => model.SiteDescription, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.SiteDescription, new { @class = "form-control", @rows = "5", @cols = "50" })
                    @Html.ValidationMessageFor(model => model.SiteDescription)
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" onclick="getPic()" />
                </div>
            </div>

       </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval", "~/Content/summernote", "~/bundle/summernote")
}
@section Title{ <h2>Edit Site</h2>}

<script src="~/Scripts/jquery-1.12.4.min.js"></script>
<script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>

<script type="text/javascript">
    
        function readURL(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    $('#pic').attr('src', e.target.result);
                }
                reader.readAsDataURL(input.files[0]);
            }
        }
    $("#file").change(function () {
        readURL(this);
            });


    function getPic() {
        var p = $('#file').val();
        if (p =="") {
            $('#file').val(e.target.result);
        }

    }

</script>

<script>
    $(document).ready(function () {
        $('#SiteDescription').summernote({
            height: 300,                 // set editor height
            minHeight: null,             // set minimum height of editor
            maxHeight: null,             // set maximum height of editor
            focus: true                  // set focus to editable area after initializing summernote
        });
    });
</script>